#pragma config(Sensor, S4,     SpinSensor,     sensorSONAR)
#pragma config(Motor,  motorA,          SensorMotor,   tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorB,          WheelL,        tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorC,          WheelR,        tmotorNXT, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
//global vairables
bool WallCenter;
bool WallLeft;
bool WallRight;

//tree traversal initialisation
struct Node
{
	char data;
	struct Node *left;
	struct Node *right;
}

//foward while until 20 away
void CenterTurn()
{
	while(SensorValue(SpinSensor) > 20){
		motor[WheelL] = 25;
		motor[WheelR] = 25;
	}
		motor[WheelL] = 0;
		motor[WheelR] = 0;
}
//Turn right preset movement
void RightTurn()
{
	motor[WheelL] = 25;
	motor[WheelR] = -25;
	wait1Msec(1000);
	motor[WheelL] = 0;
	motor[WheelR] = 0;
}

//Turn left preset movement
void LeftTurn()
{
	motor[WheelL] = -25;
	motor[WheelR] = 25;
	wait1Msec(1000);
	motor[WheelL] = 0;
	motor[WheelR] = 0;
}

void SensorWallCenter()
{
	if(SensorValue(SpinSensor) < 20){
		playTone(764, 15);
		WallCenter = true;
	} else {
		WallCenter = false;
	}
}

void SensorWallLeft()
{
	//moves sensor left
	motor[SensorMotor] = 12;
	wait1Msec(1000);
	//recenters the motor
	motor[SensorMotor] = 0;
	wait1Msec(500);
	//takes reading
	if(SensorValue(SpinSensor) < 20){
		playTone(764, 15);
		WallLeft = true;
	} else {
		WallRight = false;
	}
	//moves sensor right
	motor[SensorMotor] = -12;
	wait1Msec(1000);
	//recenters the motor
	motor[SensorMotor] = 0;
	wait1Msec(500);

}

void SensorWallRight()
{
	//moves sensor right
	motor[SensorMotor] = -12;
	wait1Msec(1000);
	//recenters the motor
	motor[SensorMotor] = 0;
	wait1Msec(500);
	//takes reading
	if(SensorValue(SpinSensor) < 20){
		playTone(764, 15);
		WallRight = true;
	} else {
		WallRight = false;
	}
	//moves sensor left
	motor[SensorMotor] = 12;
	wait1Msec(1000);
	//recenters the motor
	motor[SensorMotor] = 0;
	wait1Msec(500);
}

//current stupid work around because c++ is dumb
//
bool EndReached = false;

void TurnAround()
{
	//360 turn script
	int turnvair = SensorValue(SpinSensor);
	motor[WheelL] = -25;
	motor[WheelR] = 25;
	wait1Msec(2000);
	motor[WheelL] = 0;
	motor[WheelR] = 0;
	
}
void WallSearch()
{
	SensorWallCenter();
	SensorWallRight();
	SensorWallLeft();
	
	if (WallCenter == false )
	{
		//no wall in front
		CenterTurn();
	}else if (WallCenter == true && WallLeft == false){
		LeftTurn();
	}else if (WallCenter == true && WallRight == false){
		RightTurn();
	}else if (WallCenter == true && WallLeft == true && WallRight == true){
		//DeadEnd Script
		playTone(764, 15);
		playTone(764, 15);
		TurnAround();
	}
}

//main start
task main()
{
//place start node
while(EndReached == false)
{
	WallSearch();
	//Check For Bool Change
}
while(EndReached == true)
{
	//run search for start using tree traversal
}
}
